{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1cab5a2.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nconst api={\n  key:\"64e4b0eb5db645ba5089377dbf62e419\",\n  base:\"https://api.openweathermap.org/data/2.5/\",\n}\n\n\nfunction App() {\n  const [query, setQuery]= useState('');\n  const [weather, setWeather]= useState({});\n\n  const search= (evt)=> {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder=(d)=>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day=days[d.getDay()]\n    let date=d.getDate();\n    let month=months[d.getMonth()];\n    let year=d.getFullYear();\n    return  `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? weather.weather[0].main : 'app'}>\n      <main>\n        <div className =\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Search....\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search} ></input>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div> \n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°c\n              </div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}